// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String
  name             String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  preferences      UserPreferences?
  savedRecipes     SavedRecipe[]
  groceryList      GroceryList?
  inventory        InventoryItem[]
}

model UserPreferences {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Boolean dietary preferences
  isVegan            Boolean  @default(false)
  isVegetarian       Boolean  @default(false)
  isPescatarian      Boolean  @default(false)
  isKeto             Boolean  @default(false)
  isPaleo            Boolean  @default(false)
  isGlutenFree       Boolean  @default(false)
  isDairyFree        Boolean  @default(false)
  isNutFree          Boolean  @default(false)
  isHalal            Boolean  @default(false)
  isKosher           Boolean  @default(false)
  isLowCarb          Boolean  @default(false)
  isLowFat           Boolean  @default(false)
  
  // String preferences
  dietaryPreferences  String?
  allergies           String?
  preferredCuisines   String?
  preferredIngredients String?
  dislikedIngredients String?
  
  // Nutritional goals
  calorieTarget       Int?     @default(2000)
  proteinTarget       Int?     @default(50)
  carbTarget          Int?     @default(250)
  fatTarget           Int?     @default(70)

  @@map("user_preferences")
}

model SavedRecipe {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId  Int
  title     String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, recipeId])
}

model GroceryList {
  id        String   @id @default(cuid())
  userId    String   @unique
  items     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryItem {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  quantity    Int
  unit        String
  category    String
  expiryDate  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
} 